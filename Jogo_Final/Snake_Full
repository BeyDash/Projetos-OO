import pygame
import sys
import random
import json

# Initialize Pygame
pygame.init()

# Constants
WIDTH, HEIGHT = 1280, 720  # Updated resolution to 720p
SNAKE_SIZE = 20
SNAKE_SPEED = 15

# Colors
BLACK = (0, 0, 0)
WHITE = (255, 255, 255)
GREEN = (0, 255, 0)

# Create the screen
screen = pygame.display.set_mode((WIDTH, HEIGHT))
pygame.display.set_caption("Snake Game")

# Initialize Snake
snake_x = WIDTH // 2
snake_y = HEIGHT // 2
snake_dx = 0
snake_dy = 0
snake_length = 1
snake_list = [(snake_x, snake_y)]

# Food
food_x = random.randint(0, (WIDTH - SNAKE_SIZE) // SNAKE_SIZE) * SNAKE_SIZE
food_y = random.randint(0, (HEIGHT - SNAKE_SIZE) // SNAKE_SIZE) * SNAKE_SIZE

# Score
score = 0

# High Score
def load_high_score():
    try:
        with open("highscore.json", "r") as file:
            data = json.load(file)
            return data["high_score"]
    except FileNotFoundError:
        return 0

high_score = load_high_score()

# Fonts
font = pygame.font.SysFont(None, 35)

# Game over flag
game_over = False

# Menu
def show_menu():
    menu = True
    while menu:
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                pygame.quit()
                sys.exit()
            elif event.type == pygame.KEYDOWN:
                if event.key == pygame.K_s:
                    menu = False  # Start the game
                elif event.key == pygame.K_q:
                    pygame.quit()
                    sys.exit()  # Quit the game

        screen.fill(BLACK)
        title_text = font.render("Snake Game", True, WHITE)
        start_text = font.render("Press S to start", True, WHITE)
        high_score_text = font.render("High Score: " + str(high_score), True, WHITE)
        quit_text = font.render("Press Q to quit", True, WHITE)

        screen.blit(title_text, (WIDTH // 2 - 100, HEIGHT // 4))
        screen.blit(start_text, (WIDTH // 2 - 120, HEIGHT // 2 - 50))
        screen.blit(high_score_text, (WIDTH // 2 - 150, HEIGHT // 2))
        screen.blit(quit_text, (WIDTH // 2 - 100, HEIGHT // 2 + 50))

        pygame.display.update()

# Main loop
show_menu()
while not game_over:
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            game_over = True
        elif event.type == pygame.KEYDOWN:
            if event.key == pygame.K_UP and snake_dy == 0:
                snake_dx = 0
                snake_dy = -SNAKE_SIZE
            if event.key == pygame.K_DOWN and snake_dy == 0:
                snake_dx = 0
                snake_dy = SNAKE_SIZE
            if event.key == pygame.K_LEFT and snake_dx == 0:
                snake_dx = -SNAKE_SIZE
                snake_dy = 0
            if event.key == pygame.K_RIGHT and snake_dx == 0:
                snake_dx = SNAKE_SIZE
                snake_dy = 0

    # Move the snake
    snake_x += snake_dx
    snake_y += snake_dy

    # Check for collisions
    if snake_x == food_x and snake_y == food_y:
        score += 10
        food_x = random.randint(0, (WIDTH - SNAKE_SIZE) // SNAKE_SIZE) * SNAKE_SIZE
        food_y = random.randint(0, (HEIGHT - SNAKE_SIZE) // SNAKE_SIZE) * SNAKE_SIZE
        snake_length += 1

    # Update snake list
    snake_list.append((snake_x, snake_y))
    if len(snake_list) > snake_length:
        del snake_list[0]

    # Check for collision with wall or self
    if (
        snake_x >= WIDTH
        or snake_x < 0
        or snake_y >= HEIGHT
        or snake_y < 0
        or (snake_x, snake_y) in snake_list[:-1]
    ):
        game_over = True

    # Update the screen
    screen.fill(BLACK)
    for segment in snake_list:
        pygame.draw.rect(screen, GREEN, [segment[0], segment[1], SNAKE_SIZE, SNAKE_SIZE])
    pygame.draw.rect(screen, WHITE, [food_x, food_y, SNAKE_SIZE, SNAKE_SIZE])

    # Display score
    text = font.render("Score: " + str(score), True, WHITE)
    screen.blit(text, (10, 10))

    pygame.display.update()

    # Control game speed
    pygame.time.Clock().tick(SNAKE_SPEED)

# Save high score to a JSON file
if score > high_score:
    high_score = score
    high_score_data = {"high_score": high_score}
    with open("highscore.json", "w") as file:
        json.dump(high_score_data, file)

# Quit Pygame
pygame.quit()
sys.exit()
